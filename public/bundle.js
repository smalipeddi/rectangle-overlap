!function(Q){var F={};function B(U){if(F[U])return F[U].exports;var s=F[U]={i:U,l:!1,exports:{}};return Q[U].call(s.exports,s,s.exports,B),s.l=!0,s.exports}B.m=Q,B.c=F,B.d=function(Q,F,U){B.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:U})},B.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},B.t=function(Q,F){if(1&F&&(Q=B(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var U=Object.create(null);if(B.r(U),Object.defineProperty(U,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var s in Q)B.d(U,s,function(F){return Q[F]}.bind(null,s));return U},B.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return B.d(F,"a",F),F},B.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},B.p="public",B(B.s=0)}([function(module,exports,__webpack_require__){"use strict";eval('\r\nvar _a;\r\nclass RectangleCoordinates {\r\n    constructor(x, y) {\r\n        this.coordinates = [];\r\n        this.getNumberOfRectangles = () => {\r\n        };\r\n        this.coordinates.push(x);\r\n        this.coordinates.push(y);\r\n    }\r\n}\r\n// submit a form with the number of rectangles to test for overlapping\r\nconst form = document.querySelector(\'#rectangles\');\r\nform.onsubmit = () => {\r\n    const formData = new FormData(form);\r\n    const text = formData.get(\'textInput\');\r\n    const rectanglesCount = parseInt(text);\r\n    console.log(rectanglesCount);\r\n    // check if the user entered a positive integer\r\n    if (isNaN(rectanglesCount)) {\r\n        alert("Please enter a valid positive number");\r\n        return false;\r\n    }\r\n    else if (rectanglesCount < 2) {\r\n        alert("Please enter a valid positive number greater than 1");\r\n        return false;\r\n    }\r\n    else {\r\n        let r1 = document.getElementById("rectangle");\r\n        let label = document.createElement("label");\r\n        label.innerHTML = "Enter 4 coordinates for each rectangle seperated by comma";\r\n        r1 === null || r1 === void 0 ? void 0 : r1.appendChild(label);\r\n        // dynamically generate the input fields for each rectangle coordinates \r\n        for (var i = 0; i < rectanglesCount; i++) {\r\n            let div1 = document.createElement("div");\r\n            let label = document.createElement("label");\r\n            label.innerHTML = "Rectangle " + (i + 1);\r\n            div1.appendChild(label);\r\n            let input = document.createElement("input");\r\n            input.type = "text";\r\n            input.id = "rectangle" + i;\r\n            input.name = "rectangle" + (i + 1);\r\n            div1.append(input);\r\n            let r = document.getElementById("rectangle");\r\n            r === null || r === void 0 ? void 0 : r.appendChild(div1);\r\n        }\r\n        let r = document.getElementById("rectangle");\r\n        // create a submit button\r\n        let submitBtn = document.createElement("button");\r\n        submitBtn.type = "submit";\r\n        submitBtn.innerHTML = "SUBMIT";\r\n        r === null || r === void 0 ? void 0 : r.append(submitBtn);\r\n        return false; // prevent reload\r\n    }\r\n};\r\n// helper to parse each rectangle field data \r\nconst formInputsData = (form) => {\r\n    const inputs = form.querySelectorAll(\'input\');\r\n    let values = {};\r\n    inputs.forEach(input => {\r\n        values[input.name] = input.value;\r\n    });\r\n    return values;\r\n};\r\nconst rectangleForm = document.createElement("form");\r\nrectangleForm.setAttribute("id", "allrectangles");\r\nconst rectangleDiv = document.createElement("div");\r\nrectangleDiv.setAttribute("id", "rectangle");\r\nrectangleForm.appendChild(rectangleDiv);\r\n// append form to allrectangles wrapper\r\n(_a = document.getElementById("allrectangles-wrapper")) === null || _a === void 0 ? void 0 : _a.appendChild(rectangleForm);\r\nconst rectangleCoordinates = [];\r\n// submit all rectangles from data to check if they overlap\r\nrectangleForm.onsubmit = () => {\r\n    const formData = new FormData(rectangleForm);\r\n    const res = formInputsData(rectangleForm);\r\n    Object.keys(res).map((key) => {\r\n        const rect = res[key].split(",");\r\n        console.log("sunitha", rect);\r\n        if (isNaN(parseInt(rect[0])) || isNaN(parseInt(rect[1])) || isNaN(parseInt(rect[2])) || isNaN(parseInt(rect[3]))) {\r\n            alert("Enter valid positive integers seperated by comma");\r\n            rectangleForm.reset();\r\n            return false;\r\n        }\r\n        else {\r\n            let bottomLeft = new RectangleCoordinates(parseInt(rect[0]), parseInt(rect[1]));\r\n            let topRight = new RectangleCoordinates(parseInt(rect[2]), parseInt(rect[3]));\r\n            rectangleCoordinates.push(bottomLeft);\r\n            rectangleCoordinates.push(topRight);\r\n        }\r\n    });\r\n    // pass the coordinates of each rectangle to the testOverLap function\r\n    testOverLap(rectangleCoordinates);\r\n    rectangleForm.reset();\r\n    return false; // prevent reload\r\n};\r\nconst testOverLap = (...args) => {\r\n    // if the second rectangle is top, left, bottom or right of the coordinates of the first rectangle, then they do not overlap else they ovelap \r\n    if (rectangleCoordinates[1].coordinates[0] < rectangleCoordinates[2].coordinates[0] ||\r\n        rectangleCoordinates[1].coordinates[1] < rectangleCoordinates[2].coordinates[0] ||\r\n        rectangleCoordinates[2].coordinates[0] > rectangleCoordinates[1].coordinates[0] ||\r\n        rectangleCoordinates[0].coordinates[0] > rectangleCoordinates[3].coordinates[1]) {\r\n        console.log("Rectangles do not overlap");\r\n        alert("Area of intersection of Rectangles is 0");\r\n        location.reload();\r\n        return false;\r\n    }\r\n    else {\r\n        // check if there are only 2 rectangles, means rectangleCoordinates are 4, so no need for recursion\r\n        if (rectangleCoordinates.length === 4) {\r\n            console.log("First two Rectangles overlap");\r\n            alert("Area of intersection of Rectangles is not 0");\r\n            location.reload();\r\n            return true;\r\n        }\r\n        else {\r\n            // remove the first rectangle from the list of rectangles to test overlap and repeat the testOverLap function\r\n            rectangleCoordinates.shift();\r\n            rectangleCoordinates.shift();\r\n            console.log("remaining rectangles", rectangleCoordinates);\r\n            testOverLap(...args);\r\n            console.log("Area of intersection of Rectangles is not 0");\r\n            alert("Area of intersection of Rectangles is not 0");\r\n            location.reload();\r\n            return true;\r\n        }\r\n    }\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHM/ZmZiNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLE1BQU0sb0JBQW9CO0lBR3hCLFlBQVksQ0FBTSxFQUFDLENBQU07UUFGekIsZ0JBQVcsR0FBVSxFQUFFLENBQUM7UUFPeEIsMEJBQXFCLEdBQUcsR0FBRyxFQUFFO1FBRTdCLENBQUM7UUFOSSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4QixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQixDQUFDO0NBS0Y7QUFDRCxzRUFBc0U7QUFDdEUsTUFBTSxJQUFJLEdBQVEsUUFBUSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUV4RCxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsRUFBRTtJQUNuQixNQUFNLFFBQVEsR0FBRyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVwQyxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBVyxDQUFDO0lBQ2pELE1BQU0sZUFBZSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN2QyxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBRTdCLCtDQUErQztJQUMvQyxJQUFHLEtBQUssQ0FBQyxlQUFlLENBQUMsRUFBQztRQUN4QixLQUFLLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUM1QyxPQUFPLEtBQUssQ0FBQztLQUNoQjtTQUNJLElBQUcsZUFBZSxHQUFHLENBQUMsRUFBRTtRQUMzQixLQUFLLENBQUMscURBQXFELENBQUMsQ0FBQztRQUM3RCxPQUFPLEtBQUssQ0FBQztLQUNkO1NBQU07UUFFUCxJQUFJLEVBQUUsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzlDLElBQUksS0FBSyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFNUMsS0FBSyxDQUFDLFNBQVMsR0FBRywyREFBMkQsQ0FBQztRQUM5RSxFQUFFLGFBQUYsRUFBRSx1QkFBRixFQUFFLENBQUUsV0FBVyxDQUFDLEtBQUssRUFBQztRQUN0Qix3RUFBd0U7UUFDeEUsS0FBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFFLGVBQWUsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNsQyxJQUFJLElBQUksR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztZQUN4QyxJQUFJLEtBQUssR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRTVDLEtBQUssQ0FBQyxTQUFTLEdBQUcsWUFBWSxHQUFHLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDO1lBRXZDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDO1lBRXZCLElBQUksS0FBSyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDO1lBQzNDLEtBQUssQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDO1lBQ3BCLEtBQUssQ0FBQyxFQUFFLEdBQUMsV0FBVyxHQUFHLENBQUM7WUFDeEIsS0FBSyxDQUFDLElBQUksR0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEdBQUUsQ0FBQyxDQUFDLENBQUM7WUFFaEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7WUFFbEIsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUM3QyxDQUFDLGFBQUQsQ0FBQyx1QkFBRCxDQUFDLENBQUUsV0FBVyxDQUFDLElBQUksRUFBQztTQUVyQjtRQUVELElBQUksQ0FBQyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFN0MseUJBQXlCO1FBQ3pCLElBQUksU0FBUyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDakQsU0FBUyxDQUFDLElBQUksR0FBQyxRQUFRO1FBQ3ZCLFNBQVMsQ0FBQyxTQUFTLEdBQUcsUUFBUTtRQUM5QixDQUFDLGFBQUQsQ0FBQyx1QkFBRCxDQUFDLENBQUUsTUFBTSxDQUFDLFNBQVMsRUFBRTtRQUNyQixPQUFPLEtBQUssQ0FBQyxDQUFDLGlCQUFpQjtLQUNoQztBQUNMLENBQUMsQ0FBQztBQUVGLDZDQUE2QztBQUM3QyxNQUFNLGNBQWMsR0FBRyxDQUFDLElBQXFCLEVBQUUsRUFBRTtJQUMvQyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDOUMsSUFBSSxNQUFNLEdBQTZCLEVBQUUsQ0FBQztJQUUxQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ3JCLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztJQUNuQyxDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMsQ0FBQztBQUVGLE1BQU0sYUFBYSxHQUFRLFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDMUQsYUFBYSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsZUFBZSxDQUFDLENBQUM7QUFDbEQsTUFBTSxZQUFZLEdBQUUsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNsRCxZQUFZLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQztBQUM3QyxhQUFhLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBRXhDLHVDQUF1QztBQUN2QyxjQUFRLENBQUMsY0FBYyxDQUFDLHVCQUF1QixDQUFDLDBDQUFFLFdBQVcsQ0FBQyxhQUFhLEVBQUU7QUFFN0UsTUFBTSxvQkFBb0IsR0FBVSxFQUFFLENBQUM7QUFDdkMsMkRBQTJEO0FBQzNELGFBQWEsQ0FBQyxRQUFRLEdBQUcsR0FBRyxFQUFFO0lBQzVCLE1BQU0sUUFBUSxHQUFHLElBQUksUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzdDLE1BQU0sR0FBRyxHQUFHLGNBQWMsQ0FBQyxhQUFhLENBQUM7SUFFekMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtRQUMzQixNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFDLElBQUksQ0FBQyxDQUFDO1FBRTVCLElBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDO1lBQzlHLEtBQUssQ0FBQyxrREFBa0QsQ0FBQyxDQUFDO1lBQzFELGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUN0QixPQUFPLEtBQUs7U0FDYjthQUFNO1lBQ0wsSUFBSSxVQUFVLEdBQUcsSUFBSSxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0UsSUFBSSxRQUFRLEdBQUUsSUFBSSxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFN0Usb0JBQW9CLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3RDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNyQztJQUVILENBQUMsQ0FBQyxDQUFDO0lBRUgscUVBQXFFO0lBRXJFLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBQ2xDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN0QixPQUFPLEtBQUssQ0FBQyxDQUFDLGlCQUFpQjtBQUVqQyxDQUFDO0FBRUQsTUFBTSxXQUFXLEdBQUcsQ0FBQyxHQUFHLElBQVcsRUFBRSxFQUFFO0lBQ3JDLDhJQUE4STtJQUM5SSxJQUFHLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsR0FBRyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBQ2hGLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsR0FBRyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBQy9FLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsR0FBRyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBQy9FLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsR0FBRyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDN0UsT0FBTyxDQUFDLEdBQUcsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1FBQ3pDLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO1FBQ2pELFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNsQixPQUFPLEtBQUs7S0FDZjtTQUNJO1FBQ0QsbUdBQW1HO1FBQ25HLElBQUcsb0JBQW9CLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNwQyxPQUFPLENBQUMsR0FBRyxDQUFDLDhCQUE4QixDQUFDLENBQUM7WUFDNUMsS0FBSyxDQUFDLDZDQUE2QyxDQUFDLENBQUM7WUFDckQsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ2xCLE9BQU8sSUFBSTtTQUNaO2FBQU07WUFDTCw2R0FBNkc7WUFDN0csb0JBQW9CLENBQUMsS0FBSyxFQUFFO1lBQzVCLG9CQUFvQixDQUFDLEtBQUssRUFBRTtZQUM1QixPQUFPLENBQUMsR0FBRyxDQUFDLHNCQUFzQixFQUFFLG9CQUFvQixDQUFDLENBQUM7WUFDMUQsV0FBVyxDQUFDLEdBQUcsSUFBSSxDQUFDO1lBQ3BCLE9BQU8sQ0FBQyxHQUFHLENBQUMsNkNBQTZDLENBQUMsQ0FBQztZQUMzRCxLQUFLLENBQUMsNkNBQTZDLENBQUMsQ0FBQztZQUNyRCxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDbEIsT0FBTyxJQUFJO1NBQ1o7S0FDSjtBQUNKLENBQUMiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuY2xhc3MgUmVjdGFuZ2xlQ29vcmRpbmF0ZXMge1xuICBjb29yZGluYXRlczogYW55W10gPSBbXTtcbiAgXG4gIGNvbnN0cnVjdG9yKHg6IGFueSx5OiBhbnkpIHtcbiAgICAgICB0aGlzLmNvb3JkaW5hdGVzLnB1c2goeCk7XG4gICAgICAgIHRoaXMuY29vcmRpbmF0ZXMucHVzaCh5KTtcbiAgfVxuXG4gIGdldE51bWJlck9mUmVjdGFuZ2xlcyA9ICgpID0+IHtcbiAgICBcbiAgfVxufVxuLy8gc3VibWl0IGEgZm9ybSB3aXRoIHRoZSBudW1iZXIgb2YgcmVjdGFuZ2xlcyB0byB0ZXN0IGZvciBvdmVybGFwcGluZ1xuY29uc3QgZm9ybTogYW55ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3JlY3RhbmdsZXMnKTtcblxuZm9ybS5vbnN1Ym1pdCA9ICgpID0+IHtcbiAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoZm9ybSk7XG5cbiAgY29uc3QgdGV4dCA9IGZvcm1EYXRhLmdldCgndGV4dElucHV0JykgYXMgc3RyaW5nO1xuICBjb25zdCByZWN0YW5nbGVzQ291bnQgPSBwYXJzZUludCh0ZXh0KTtcbiAgY29uc29sZS5sb2cocmVjdGFuZ2xlc0NvdW50KTtcbiAgXG4gIC8vIGNoZWNrIGlmIHRoZSB1c2VyIGVudGVyZWQgYSBwb3NpdGl2ZSBpbnRlZ2VyXG4gIGlmKGlzTmFOKHJlY3RhbmdsZXNDb3VudCkpe1xuICAgIGFsZXJ0KFwiUGxlYXNlIGVudGVyIGEgdmFsaWQgcG9zaXRpdmUgbnVtYmVyXCIpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGVsc2UgaWYocmVjdGFuZ2xlc0NvdW50IDwgMiApe1xuICAgIGFsZXJ0KFwiUGxlYXNlIGVudGVyIGEgdmFsaWQgcG9zaXRpdmUgbnVtYmVyIGdyZWF0ZXIgdGhhbiAxXCIpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICAgXG4gIGxldCByMSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVjdGFuZ2xlXCIpO1xuICBsZXQgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gICAgICAgIFxuICBsYWJlbC5pbm5lckhUTUwgPSBcIkVudGVyIDQgY29vcmRpbmF0ZXMgZm9yIGVhY2ggcmVjdGFuZ2xlIHNlcGVyYXRlZCBieSBjb21tYVwiO1xuICByMT8uYXBwZW5kQ2hpbGQobGFiZWwpXG4gIC8vIGR5bmFtaWNhbGx5IGdlbmVyYXRlIHRoZSBpbnB1dCBmaWVsZHMgZm9yIGVhY2ggcmVjdGFuZ2xlIGNvb3JkaW5hdGVzIFxuICBmb3IodmFyIGkgPSAwOyBpIDxyZWN0YW5nbGVzQ291bnQ7IGkrKykge1xuICAgICAgICBsZXQgZGl2MSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIilcbiAgICAgICAgbGV0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICAgICAgICBcbiAgICAgICAgbGFiZWwuaW5uZXJIVE1MID0gXCJSZWN0YW5nbGUgXCIgKyAoaSsxKTtcbiAgICAgIFxuICAgICAgICBkaXYxLmFwcGVuZENoaWxkKGxhYmVsKVxuICAgIFxuICAgICAgICBsZXQgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIilcbiAgICAgICAgaW5wdXQudHlwZSA9IFwidGV4dFwiO1xuICAgICAgICBpbnB1dC5pZD1cInJlY3RhbmdsZVwiICsgaVxuICAgICAgICBpbnB1dC5uYW1lPVwicmVjdGFuZ2xlXCIgKyAoaSArMSk7XG4gICAgICAgXG4gICAgICAgIGRpdjEuYXBwZW5kKGlucHV0KVxuICAgICAgXG4gICAgICAgIGxldCByID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZWN0YW5nbGVcIik7XG4gICAgICAgIHI/LmFwcGVuZENoaWxkKGRpdjEpXG4gICAgIFxuICAgICAgfVxuIFxuICAgICAgbGV0IHIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlY3RhbmdsZVwiKTtcbiAgICAgIFxuICAgICAgLy8gY3JlYXRlIGEgc3VibWl0IGJ1dHRvblxuICAgICAgbGV0IHN1Ym1pdEJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICBzdWJtaXRCdG4udHlwZT1cInN1Ym1pdFwiXG4gICAgICBzdWJtaXRCdG4uaW5uZXJIVE1MID0gXCJTVUJNSVRcIlxuICAgICAgcj8uYXBwZW5kKHN1Ym1pdEJ0bik7XG4gICAgICByZXR1cm4gZmFsc2U7IC8vIHByZXZlbnQgcmVsb2FkXG4gICAgfVxufTtcblxuLy8gaGVscGVyIHRvIHBhcnNlIGVhY2ggcmVjdGFuZ2xlIGZpZWxkIGRhdGEgXG5jb25zdCBmb3JtSW5wdXRzRGF0YSA9IChmb3JtOiBIVE1MRm9ybUVsZW1lbnQpID0+IHtcbiAgY29uc3QgaW5wdXRzID0gZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dCcpO1xuICBsZXQgdmFsdWVzOiB7W3Byb3A6IHN0cmluZ106IHN0cmluZ30gPSB7fTtcblxuICBpbnB1dHMuZm9yRWFjaChpbnB1dCA9PiB7XG4gICAgdmFsdWVzW2lucHV0Lm5hbWVdID0gaW5wdXQudmFsdWU7XG4gIH0pO1xuICByZXR1cm4gdmFsdWVzO1xufTtcblxuY29uc3QgcmVjdGFuZ2xlRm9ybTogYW55ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZvcm1cIik7XG5yZWN0YW5nbGVGb3JtLnNldEF0dHJpYnV0ZShcImlkXCIsIFwiYWxscmVjdGFuZ2xlc1wiKTtcbmNvbnN0IHJlY3RhbmdsZURpdiA9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbnJlY3RhbmdsZURpdi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcInJlY3RhbmdsZVwiKTtcbnJlY3RhbmdsZUZvcm0uYXBwZW5kQ2hpbGQocmVjdGFuZ2xlRGl2KTtcblxuLy8gYXBwZW5kIGZvcm0gdG8gYWxscmVjdGFuZ2xlcyB3cmFwcGVyXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFsbHJlY3RhbmdsZXMtd3JhcHBlclwiKT8uYXBwZW5kQ2hpbGQocmVjdGFuZ2xlRm9ybSk7XG5cbmNvbnN0IHJlY3RhbmdsZUNvb3JkaW5hdGVzOiBhbnlbXSA9IFtdO1xuLy8gc3VibWl0IGFsbCByZWN0YW5nbGVzIGZyb20gZGF0YSB0byBjaGVjayBpZiB0aGV5IG92ZXJsYXBcbnJlY3RhbmdsZUZvcm0ub25zdWJtaXQgPSAoKSA9PiB7XG4gIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKHJlY3RhbmdsZUZvcm0pO1xuICBjb25zdCByZXMgPSBmb3JtSW5wdXRzRGF0YShyZWN0YW5nbGVGb3JtKVxuICBcbiAgT2JqZWN0LmtleXMocmVzKS5tYXAoKGtleSkgPT4ge1xuICAgIGNvbnN0IHJlY3QgPSByZXNba2V5XS5zcGxpdChcIixcIik7XG4gICAgY29uc29sZS5sb2coXCJzdW5pdGhhXCIscmVjdCk7XG5cbiAgICBpZihpc05hTihwYXJzZUludChyZWN0WzBdKSkgfHwgaXNOYU4ocGFyc2VJbnQocmVjdFsxXSkpIHx8IGlzTmFOKHBhcnNlSW50KHJlY3RbMl0pKSB8fCBpc05hTihwYXJzZUludChyZWN0WzNdKSkpe1xuICAgICAgYWxlcnQoXCJFbnRlciB2YWxpZCBwb3NpdGl2ZSBpbnRlZ2VycyBzZXBlcmF0ZWQgYnkgY29tbWFcIik7XG4gICAgICByZWN0YW5nbGVGb3JtLnJlc2V0KCk7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGJvdHRvbUxlZnQgPSBuZXcgUmVjdGFuZ2xlQ29vcmRpbmF0ZXMocGFyc2VJbnQocmVjdFswXSkscGFyc2VJbnQocmVjdFsxXSkpO1xuICAgICAgbGV0IHRvcFJpZ2h0PSBuZXcgUmVjdGFuZ2xlQ29vcmRpbmF0ZXMocGFyc2VJbnQocmVjdFsyXSksIHBhcnNlSW50KHJlY3RbM10pKTtcbiAgICBcbiAgICAgIHJlY3RhbmdsZUNvb3JkaW5hdGVzLnB1c2goYm90dG9tTGVmdCk7XG4gICAgICByZWN0YW5nbGVDb29yZGluYXRlcy5wdXNoKHRvcFJpZ2h0KTtcbiAgICB9XG5cbiAgfSk7XG4gIFxuICAvLyBwYXNzIHRoZSBjb29yZGluYXRlcyBvZiBlYWNoIHJlY3RhbmdsZSB0byB0aGUgdGVzdE92ZXJMYXAgZnVuY3Rpb25cbiBcbiAgdGVzdE92ZXJMYXAocmVjdGFuZ2xlQ29vcmRpbmF0ZXMpO1xuICByZWN0YW5nbGVGb3JtLnJlc2V0KCk7XG4gIHJldHVybiBmYWxzZTsgLy8gcHJldmVudCByZWxvYWRcblxufVxuXG5jb25zdCB0ZXN0T3ZlckxhcCA9ICguLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAvLyBpZiB0aGUgc2Vjb25kIHJlY3RhbmdsZSBpcyB0b3AsIGxlZnQsIGJvdHRvbSBvciByaWdodCBvZiB0aGUgY29vcmRpbmF0ZXMgb2YgdGhlIGZpcnN0IHJlY3RhbmdsZSwgdGhlbiB0aGV5IGRvIG5vdCBvdmVybGFwIGVsc2UgdGhleSBvdmVsYXAgXG4gIGlmKHJlY3RhbmdsZUNvb3JkaW5hdGVzWzFdLmNvb3JkaW5hdGVzWzBdIDwgcmVjdGFuZ2xlQ29vcmRpbmF0ZXNbMl0uY29vcmRpbmF0ZXNbMF0gfHxcbiAgICByZWN0YW5nbGVDb29yZGluYXRlc1sxXS5jb29yZGluYXRlc1sxXSA8IHJlY3RhbmdsZUNvb3JkaW5hdGVzWzJdLmNvb3JkaW5hdGVzWzBdIHx8XG4gICAgcmVjdGFuZ2xlQ29vcmRpbmF0ZXNbMl0uY29vcmRpbmF0ZXNbMF0gPiByZWN0YW5nbGVDb29yZGluYXRlc1sxXS5jb29yZGluYXRlc1swXSB8fFxuICAgIHJlY3RhbmdsZUNvb3JkaW5hdGVzWzBdLmNvb3JkaW5hdGVzWzBdID4gcmVjdGFuZ2xlQ29vcmRpbmF0ZXNbM10uY29vcmRpbmF0ZXNbMV0pIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJSZWN0YW5nbGVzIGRvIG5vdCBvdmVybGFwXCIpO1xuICAgICAgICBhbGVydChcIkFyZWEgb2YgaW50ZXJzZWN0aW9uIG9mIFJlY3RhbmdsZXMgaXMgMFwiKTtcbiAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gY2hlY2sgaWYgdGhlcmUgYXJlIG9ubHkgMiByZWN0YW5nbGVzLCBtZWFucyByZWN0YW5nbGVDb29yZGluYXRlcyBhcmUgNCwgc28gbm8gbmVlZCBmb3IgcmVjdXJzaW9uXG4gICAgICAgIGlmKHJlY3RhbmdsZUNvb3JkaW5hdGVzLmxlbmd0aCA9PT0gNCkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiRmlyc3QgdHdvIFJlY3RhbmdsZXMgb3ZlcmxhcFwiKTtcbiAgICAgICAgICBhbGVydChcIkFyZWEgb2YgaW50ZXJzZWN0aW9uIG9mIFJlY3RhbmdsZXMgaXMgbm90IDBcIik7XG4gICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyByZW1vdmUgdGhlIGZpcnN0IHJlY3RhbmdsZSBmcm9tIHRoZSBsaXN0IG9mIHJlY3RhbmdsZXMgdG8gdGVzdCBvdmVybGFwIGFuZCByZXBlYXQgdGhlIHRlc3RPdmVyTGFwIGZ1bmN0aW9uXG4gICAgICAgICAgcmVjdGFuZ2xlQ29vcmRpbmF0ZXMuc2hpZnQoKVxuICAgICAgICAgIHJlY3RhbmdsZUNvb3JkaW5hdGVzLnNoaWZ0KClcbiAgICAgICAgICBjb25zb2xlLmxvZyhcInJlbWFpbmluZyByZWN0YW5nbGVzXCIsIHJlY3RhbmdsZUNvb3JkaW5hdGVzKTtcbiAgICAgICAgICB0ZXN0T3ZlckxhcCguLi5hcmdzKVxuICAgICAgICAgIGNvbnNvbGUubG9nKFwiQXJlYSBvZiBpbnRlcnNlY3Rpb24gb2YgUmVjdGFuZ2xlcyBpcyBub3QgMFwiKTtcbiAgICAgICAgICBhbGVydChcIkFyZWEgb2YgaW50ZXJzZWN0aW9uIG9mIFJlY3RhbmdsZXMgaXMgbm90IDBcIik7XG4gICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgIH1cbiB9XG5cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n')}]);